---
- hosts: all
  gather_facts: no
  become: yes
  vars:
    change_sshkey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBznwIb7wGsPVKqUqehpBK7wpUBHaiqU1HQEwfc48LzP"
    user_passwords: []

  tasks:
    - name: Fetch non-system users
      shell: "awk -F: '$3 >= 1000 && $3 != 65534 {print $1}' /etc/passwd"
      register: users
      changed_when: false

    - name: Generate a unique random password for each user and store it
      set_fact:
        user_passwords: "{{ user_passwords | default([]) + [{'user': item, 'password': lookup('password', '/dev/null chars=ascii_letters,digits length=12')}] }}"
      loop: "{{ users.stdout_lines }}"
      when: users.stdout_lines is defined and users.stdout_lines | length > 0

    - name: Set the unique random password for each non-system user
      user:
        name: "{{ item.user }}"
        update_password: always
        password: "{{ item.password | password_hash('sha512') }}"
      loop: "{{ user_passwords }}"
      register: password_change

    # Force changing password on next login
    - name: Force Password Expiration
      command: "chage -d 0 {{ item }}"
      with_items: "{{ users.stdout_lines }}"
      when: users.stdout_lines is defined and users.stdout_lines | length > 0

    # Ensure existence of ~/.ssh/authorized_keys
    - name: Ensure user has /home/<user>/.ssh/authorized_keys
      stat:
        path: "/home/{{ item }}/.ssh/authorized_keys"
      register: auth_key_stat
      with_items: "{{ users.stdout_lines }}"
      when: users.stdout_lines is defined and users.stdout_lines | length > 0

    # Back up existing authorized_keys file
    - name: Backup existing authorized_keys file to authorized_keys.old
      copy:
        src: "/home/{{ item.item }}/.ssh/authorized_keys"
        dest: "/home/{{ item.item }}/.ssh/authorized_keys.old"
        remote_src: yes
        owner: "{{ item.item }}"
        group: "{{ item.item }}"
        mode: preserve
      register: backup
      with_items: "{{ auth_key_stat.results }}"
      when: "item.stat.exists"

    # Replace authorized_key file with our own
    - name: Replace content of authorized_keys file with a new SSH key
      copy:
        dest: "/home/{{ item.item }}/.ssh/authorized_keys"
        content: "{{ change_sshkey }}"
        owner: "{{ item.item }}"
        group: "{{ item.item }}"
        mode: '0600'
      with_items: "{{ auth_key_stat.results }}"
      when: "item.stat.exists and backup is defined"